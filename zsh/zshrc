# Exports
export PATH="$HOME/scripts:$PATH"
export PATH="$HOME/.poetry/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.pulumi/bin:$PATH"
export PATH="$PATH:/usr/local/go/bin"
export PATH="$PATH:/opt"
export PATH="$PATH:/usr/bin"
export PATH="$HOME/go/bin:$PATH"
export ZSH="$HOME/.oh-my-zsh"
export GOPATH="$HOME/smieci.go"
export EDITOR="nvim"
export LS_COLORS="$(vivid generate snazzy)"

export ANDROID_HOME="$HOME/Android/Sdk"
export PATH="$PATH:$ANDROID_HOME/emulator"
export PATH="$PATH:$ANDROID_HOME/platform-tools"

# Prevent pressing touchpad while typing (5.15.0-48-generic)
# synclient MaxTapTime=0
# synclient PalmDetect=1

ZSH_THEME="eastwood"

DISABLE_AUTO_TITLE="false"

source ~/.zsh/catppuccin_mocha-zsh-syntax-highlighting.zsh
plugins=(git python zsh-autosuggestions zsh-syntax-highlighting you-should-use)

# History settings
HISTFILE=~/.histfile
HISTSIZE=1000000
SAVEHIST=1000000
setopt EXTENDED_HISTORY
setopt HIST_REDUCE_BLANKS
HIST_STAMPS="yyyy-mm-dd"

# Edit line in vim with <C-x><C-e>
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# Disable beep on error
unsetopt beep
unsetopt nomatch

bindkey -v

# Functions

# List packages
# Usage: qi [package] or qi to list all packages
function qi() {
    (
        type dpkg-query &> /dev/null && dpkg-query -W -f '${db:Status-Abbrev} ${Package} ${Version}\n'
        type snap &> /dev/null && snap list | sed -e '/^Name/d' -e 's/^/snap /'
    ) | awk -v argline="$*" 'BEGIN { split(argline, fwords, / +/) }
        function include(package) {
            for (i in fwords) {
                if (index(package, tolower(fwords[i])) == 0) {
                    return 0
                }
            }
            return 1
        }
        /^ii/ && include($2 $3) {
            printf("%-30s %s\n", $2, $3)
        }
        /^snap/ && include($2 $3 "[snap]") {
            printf("%-30s %-20s [snap]\n", $2, $3)
        }'
}

function big-files() {
    if [ "$2" = "gib" ]; then
        factor=$((1024 * 1024 * 1024))
        pf='GiB'
    else
        factor=$((1024 * 1024))
        pf='MiB'
    fi
    find "${1:-.}" -type f -printf '%s\t%P\n' |
        sort -nr -k1 |
        awk -F\\t -v factor=$factor -v pf=$pf '{ printf("%.2f %s\t%s\n", $1/factor, pf, $2); }'
}

function big-dirs() {
    if [ "$2" = "gib" ]; then
        factor=$((1024 * 1024 * 1024))
        pf='GiB'
    else
        factor=$((1024 * 1024))
        pf='MiB'
    fi
    find "${1-.}" -maxdepth 1 -mindepth 1 -type d -print0 |
        xargs -0 du -bs |
        sort -nr -k1 |
        awk -F\\t -v factor=$factor -v pf=$pf '{ printf("%.2f %s\t%s\n", $1/factor, pf, $2); }'
}

function muxvideo() {
    ffmpeg -i "$1" -i "$2" -c:v copy -c:a aac "$3"
}

function burnsubs() {
    video="$1"
    subs="$2"
    ffmpeg -i "$video" -i "$subs" -c copy -c:s mov_text outfile.mp4
}

# Align envs between gdb and shell to prevent stack misalignment
# NOTE: unset LINES and COLUMNS envs inside gdb
# Usage: align-envs gdb ./main -q
function align-envs() {
    env -i PWD="$(pwd)" SHELL="/bin/bash" SHLVL=0 "$@"
}

# Aliases
alias \
    cp='cp -iv' \
    mv='mv -iv' \
    rm='rm -Iv'

alias \
    ls='ls -hN --color=auto --group-directories-first' \
    grep='grep --color=auto' \
    diff='diff --color=auto' \
    fgrep='fgrep --color=auto' \
    egrep='egrep --color=auto'

alias \
    cl='clear' \
    cls='clear' \
    ytmp4='yt-dlp -f bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best' \
    ytflac='yt-dlp --extract-audio --audio-format flac' \
    ytwebm='yt-dlp -f "bv*[height<=720]+ba/b[height<=720] / wv*+ba/w"' \
    ytplflac='yt-dlp -f "bestaudio/best" -ciw -o "%(title)s.%(ext)s" --extract-audio --audio-format flac --yes-playlist' \
    nb='newsboat' \
    e='$EDITOR' \
    v='nvim' \
    c='cursor-appimage --no-sandbox' \
    fz='nvim $(fzf)' \
    t='tmux'

alias \
    encrypt-file='gpg -c --no-symkey-cache --pinentry-mode=loopback' \
    decrypt-file='gpg -d --no-symkey-cache --pinentry-mode=loopback'

# Autocompletion menu
zstyle ':completion:*' menu yes select
# Boost performance
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
DISABLE_UNTRACKED_FILES_DIRTY="true"

source $ZSH/oh-my-zsh.sh

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH=$BUN_INSTALL/bin:$PATH

export PNPM_HOME="/home/h4wk/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

PATH=~/.console-ninja/.bin:$PATH

eval "$(zoxide init zsh)"

# bun completions
[ -s "/home/hxwk/.bun/_bun" ] && source "/home/hxwk/.bun/_bun"
